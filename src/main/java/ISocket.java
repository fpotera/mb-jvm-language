
/**
 * The SOCKET extension module contains functions and statements for handling sockets.
 * 
 * @author Codrin Cojocaru
 */
public interface ISocket {
	
	public static final java.lang.String ERROR_SOCKET_LISTEN_UNKNOWN_SERVICE_NAME = "Socket listen error: Unknwon service name.";
	public static final java.lang.String ERROR_SOCKET_LISTEN_SOCKET_FAILED = "Socket listen error: Socket failed.";
	public static final java.lang.String ERROR_SOCKET_LISTEN_BIND_FAILED = "Socket listen error: Bind failed.";
	public static final java.lang.String ERROR_SOCKET_LISTEN_LISTEN_FAILED = "Socket listen error: Listen failed.";
	
	public static final java.lang.String ERROR_SOCKET_ACCEPT_UNKNOWN_SOCKET = "Socket accept error: Unknown socket.";
	public static final java.lang.String ERROR_SOCKET_ACCEPT_ACCEPT_FAILED = "Socket accept error: Accept failed.";
	
	public static final java.lang.String ERROR_SOCKET_CONNECT_UNKNOWN_HOST_NAME = "Socket connect error: Unknown hostname.";
	public static final java.lang.String ERROR_SOCKET_CONNECT_UNKNOWN_SERVICE_NAME = "Socket connect error: Unknown service name.";
	public static final java.lang.String ERROR_SOCKET_CONNECT_SOCKET_FAILED = "Socket connect error: Socket failed.";
	public static final java.lang.String ERROR_SOCKET_CONNECT_BIND_FAILED = "Socket connect error: Socket failed.";
	public static final java.lang.String ERROR_SOCKET_CONNECT_CONNECT_FAILED = "Socket connect error: Connect failed.";
	
	public static final java.lang.String ERROR_SOCKET_GET_UNKNOWN_SOCKET = "Error soccket get: Unknown socket.";
	public static final java.lang.String ERROR_SOCKET_GET_BLOCKING_FAILED = "Error socket get: Blocking failed.";
	public static final java.lang.String ERROR_SOCKET_GET_RECV_FAILED = "Error socket get: Recv failed.";
	
	/**
	 * <code><b><i>SOCKET.accept</i></b></code> - Function (procedure) used to accept incoming connection requests.
	 * @param args (listen-socket)
	 * 				</br>The <code><b><i>listen-socket</i></b></code> parameter is a socket descriptor previously returned by the SOCKET.LISTEN function.
	 * @return a socket descriptor.
	 */
	public abstract Object accept(Object... args);
	
	/**
	 * <code><b><i>SOCKET.connect</i></b></code> - Function (procedure) that makes a connection to the socket specified by the host and service arguments.
	 * @param args (host, service)
	 * 				</br>The <code><b><i>host</i></b></code> is the name or the IP address, using dot notation, for the host to connect to.
	 * 				</br>The <code><b><i>service</i></b></code> parameter is a service name or a decimal number specifying the TCP port number to use.
	 * @return a socket descriptor.
	 */
	public abstract Object connect(Object... args);
	
	/**
	 * <code><b><i>SOCKET.disconnect</i></b></code> - Function (procedure) used to close a socket.
	 * @param args (socket)
	 * 				</br>The <code><b><i>socket</i></b></code> parameter is the socket to be closed.
	 */
	public abstract void disconnect(Object... args);
	
	/**
	 * <code><b><i>SL_ARRAY.Insert</i></b></code> - Function (procedure) that returns the error string for the last error generated by the SOCKET extension. If no error has been generated, an empty string is returned.
	 * @return the last error generated by the SOCKET extension.
	 */
	public abstract Object error(Object... args);
	
	/**
	 * <code><b><i>SOCKET.get</i></b></code> - Function (procedure) that reads data from a socket.
	 * @param args (connect-socket, size)
	 * 				</br>The <code><b><i>connect-socket</i></b></code> parameter is a socket descriptor previously returned by one of the SOCKET.ACCEPT or SOCKET.CONNECT functions.
	 *				</br>The <code><b><i>size</i></b></code> parameter is the maximum number of bytes to read.
	 * @return a String containing the read data.
	 */
	public abstract Object get(Object... args);
	
	/**
	 * <code><b><i>SOCKET.listen</i></b></code> - Function (procedure) that creates a socket that can be used to listen for connections; that is, it creates a server socket.
	 * @param args (service, backlog)
	 * 				</br>The <code><b><i>service</i></b></code> parameter is an expression that is converted to a string. It is a service name or a decimal number specifying the TCP port number to use.
	 * 				</br>The <code><b><i>backlog</i></b></code> parameter specifies the desirable queue length for pending connections. The default value is 2.
	 * @return the modified array.
	 */
	public abstract Object listen(Object... args);
	
	/**
	 * <code><b><i>SOCKET.nget</i></b></code> - Function (procedure) that reads data from a socket in nonblocking mode.
	 * @param args (connect-socket, size)
	 * 				</br>The <code><b><i>connect-socket</i></b></code> parameter is a socket descriptor previously returned by one of the SOCKET.ACCEPT or SOCKET.CONNECT functions.
	 *				</br>The <code><b><i>size</i></b></code> parameter is the maximum number of bytes to read.
	 * @return a String containing the read data.
	 */
	public abstract Object nget(Object... args);
	
	/**
	 * <code><b><i>SOCKET.nput</i></b></code> - Function (procedure) that writes data to a socket in nonblocking mode.
	 * @param args (connect-socket, data)
	 * 				</br>The <code><b><i>connect-socket</i></b></code> parameter is a socket descriptor previously returned by one of the SOCKET.ACCEPT or SOCKET.CONNECT functions.
	 * 				</br>The <code><b><i>data</i></b></code> parameter is the data to write.
	 * @return the number of bytes actually written.
	 */
	public abstract Object nput(Object... args);
	
	/**
	 * <code><b><i>SOCKET.put</i></b></code> - Function (procedure) that writes data to a socket.
	 * @param args (connect-socket, data)
	 * 				</br>The <code><b><i>connect-socket</i></b></code> parameter is a socket descriptor previously returned by one of the SOCKET.ACCEPT or SOCKET.CONNECT functions.
	 * 				</br>The <code><b><i>data</i></b></code> parameter is the data to write.
	 * @return the number of bytes actually written.
	 */
	public abstract Object put(Object... args);
	
	/**
	 * <code><b><i>SOCKET.Version</i></b></code> - Function that returns the version number for the SOCKET module as a string
	 * @return the version number for the SOCKET module as a string.<code></br>The format of the string is n1.n2.n3.</code>
	 */
	public abstract Object version(Object... args);
	
	
}
